https://docs.docker.com/install/linux/docker-ce/ubuntu


apt remove docker docker-engine docker.io
apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
apt-key fingerprint 0EBFCD88

add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
apt update
apt install docker-ce
docker --version
  Docker version 18.09.0, build 4d60db4

usermod -aG docker dml

docker info
docker images
docker ps
docker container ls -a
docker container prune
docker version


Dockerfile
  # Use an official Python runtime as a parent image
  FROM python:2.7-slim

  # Set the working directory to /app
  WORKDIR /app

  # Copy the current directory contents into the container at /app
  COPY . /app

  # Install any needed packages specified in requirements.txt
  RUN pip install --trusted-host pypi.python.org -r requirements.txt

  # Make port 80 available to the world outside this container
  EXPOSE 80

  # Define environment variable
  ENV NAME World

  # Run app.py when the container launches
  CMD ["python", "app.py"]


docker build -t test_app .
docker run -p 4000:80 test_app

http://docker0:4000/

docker run -d -p 4000:80 test_app

docker login

aie8jfu:&^54YHGfe

# docker tag image username/repository:tag
# docker push username/repository:tag
# docker run -p 4000:80 username/repository:tag

docker tag test_app dmlesc/test_app:part2
docker push dmlesc/test_app:part2

sudo curl -L "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
sudo curl -L https://raw.githubusercontent.com/docker/compose/1.23.1/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose




docker-compose.yml
  version: "3"
  services:
    web:
      # replace username/repo:tag with your name and image details
      image: username/repo:tag
      deploy:
        replicas: 5
        resources:
          limits:
            cpus: "0.1"
            memory: 50M
        restart_policy:
          condition: on-failure
      ports:
        - "4000:80"
      networks:
        - webnet
  networks:
    webnet:

docker-compose.yml
  version: '3'
  services:
    web:
      build: .
      ports:
      - "5000:5000"
      volumes:
      - .:/code
      - logvolume01:/var/log
      links:
      - redis
    redis:
      image: redis
  volumes:
    logvolume01: {}

docker swarm init
docker stack deploy -c docker-compose.yml test_app
docker service ls
docker service ps test_app_web
docker stack rm test_app
docker swarm leave --force



mkdir test_django
cd test_django
nano Dockerfile
  FROM python:3
  ENV PYTHONUNBUFFERED 1
  RUN mkdir /code
  WORKDIR /code
  ADD requirements.txt /code/
  RUN pip install -r requirements.txt
  ADD . /code/

nano requirements.txt
  Django>=1.8,<2.0
  psycopg2

nano docker-compose.yml
version: '3'

services:
  db:
    image: postgres
  web:
    build: .
    command: python3 manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    depends_on:
      - db

sudo docker-compose run web django-admin.py startproject test_django .
sudo chown -R $USER:$USER .
nano test_django/settings.py
DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': 'postgres',
    'USER': 'postgres',
    'HOST': 'db',
    'PORT': 5432,
  }
}

docker-compose up
docker-compose down


=====
 LXD
=====

lxc copy base docker0 --container-only -c security.nesting=true
lxc config set docker0 limits.cpu 2
lxc config set docker0 limits.memory 2GB
lxc start docker0
lxc exec docker0 bash

[install docker]

mkdir /etc/systemd/system/containerd.service.d/
cd /etc/systemd/system/containerd.service.d/
nano override.conf
  [Service]
  ExecStartPre=

systemctl daemon-reload
systemctl restart containerd.service



==========
 commands
==========

docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry
